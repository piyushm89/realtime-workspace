{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nconst ICE_SERVERS = {\n  iceServers: [{\n    urls: 'stun:stun.l.google.com:19302'\n  }, {\n    urls: 'stun:stun1.l.google.com:19302'\n  }]\n};\nexport const useWebRTC = (socket, localStream) => {\n  _s();\n  const [peers, setPeers] = useState({});\n  const [remoteStreams, setRemoteStreams] = useState({});\n  const createPeerConnection = useCallback(userId => {\n    const peerConnection = new RTCPeerConnection(ICE_SERVERS);\n\n    // Add local stream tracks\n    if (localStream) {\n      localStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, localStream);\n      });\n    }\n\n    // Handle remote stream\n    peerConnection.ontrack = event => {\n      const [remoteStream] = event.streams;\n      setRemoteStreams(prev => ({\n        ...prev,\n        [userId]: remoteStream\n      }));\n    };\n\n    // Handle ICE candidates\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket === null || socket === void 0 ? void 0 : socket.emit('webrtc-ice-candidate', {\n          targetId: userId,\n          candidate: event.candidate\n        });\n      }\n    };\n    return peerConnection;\n  }, [localStream, socket]);\n  const startCall = useCallback(async targetUserId => {\n    const peerConnection = createPeerConnection(targetUserId);\n    setPeers(prev => ({\n      ...prev,\n      [targetUserId]: peerConnection\n    }));\n    try {\n      const offer = await peerConnection.createOffer();\n      await peerConnection.setLocalDescription(offer);\n      socket === null || socket === void 0 ? void 0 : socket.emit('webrtc-offer', {\n        targetId: targetUserId,\n        offer\n      });\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    }\n  }, [createPeerConnection, socket]);\n  const endCall = useCallback(userId => {\n    if (peers[userId]) {\n      peers[userId].close();\n      setPeers(prev => {\n        const newPeers = {\n          ...prev\n        };\n        delete newPeers[userId];\n        return newPeers;\n      });\n    }\n    setRemoteStreams(prev => {\n      const newStreams = {\n        ...prev\n      };\n      delete newStreams[userId];\n      return newStreams;\n    });\n  }, [peers]);\n  useEffect(() => {\n    if (!socket) return;\n\n    // Handle incoming offers\n    socket.on('webrtc-offer', async ({\n      offer,\n      senderId\n    }) => {\n      const peerConnection = createPeerConnection(senderId);\n      setPeers(prev => ({\n        ...prev,\n        [senderId]: peerConnection\n      }));\n      try {\n        await peerConnection.setRemoteDescription(offer);\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        socket.emit('webrtc-answer', {\n          targetId: senderId,\n          answer\n        });\n      } catch (error) {\n        console.error('Error handling offer:', error);\n      }\n    });\n\n    // Handle incoming answers\n    socket.on('webrtc-answer', async ({\n      answer,\n      senderId\n    }) => {\n      const peerConnection = peers[senderId];\n      if (peerConnection) {\n        try {\n          await peerConnection.setRemoteDescription(answer);\n        } catch (error) {\n          console.error('Error handling answer:', error);\n        }\n      }\n    });\n\n    // Handle ICE candidates\n    socket.on('webrtc-ice-candidate', async ({\n      candidate,\n      senderId\n    }) => {\n      const peerConnection = peers[senderId];\n      if (peerConnection) {\n        try {\n          await peerConnection.addIceCandidate(candidate);\n        } catch (error) {\n          console.error('Error adding ICE candidate:', error);\n        }\n      }\n    });\n    return () => {\n      socket.off('webrtc-offer');\n      socket.off('webrtc-answer');\n      socket.off('webrtc-ice-candidate');\n    };\n  }, [socket, createPeerConnection, peers]);\n  return {\n    remoteStreams,\n    startCall,\n    endCall\n  };\n};\n_s(useWebRTC, \"fJxA2U1nBWWozAgQLF9jxQoYmVs=\");","map":{"version":3,"names":["useState","useEffect","useCallback","ICE_SERVERS","iceServers","urls","useWebRTC","socket","localStream","_s","peers","setPeers","remoteStreams","setRemoteStreams","createPeerConnection","userId","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","ontrack","event","remoteStream","streams","prev","onicecandidate","candidate","emit","targetId","startCall","targetUserId","offer","createOffer","setLocalDescription","error","console","endCall","close","newPeers","newStreams","on","senderId","setRemoteDescription","answer","createAnswer","addIceCandidate","off"],"sources":["/home/piyush/Desktop/collabdraw/realtime-workspace/client/src/webrtc/useWebRTC.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst ICE_SERVERS = {\n  iceServers: [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' }\n  ]\n};\n\nexport const useWebRTC = (socket, localStream) => {\n  const [peers, setPeers] = useState({});\n  const [remoteStreams, setRemoteStreams] = useState({});\n\n  const createPeerConnection = useCallback((userId) => {\n    const peerConnection = new RTCPeerConnection(ICE_SERVERS);\n    \n    // Add local stream tracks\n    if (localStream) {\n      localStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, localStream);\n      });\n    }\n\n    // Handle remote stream\n    peerConnection.ontrack = (event) => {\n      const [remoteStream] = event.streams;\n      setRemoteStreams(prev => ({\n        ...prev,\n        [userId]: remoteStream\n      }));\n    };\n\n    // Handle ICE candidates\n    peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        socket?.emit('webrtc-ice-candidate', {\n          targetId: userId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    return peerConnection;\n  }, [localStream, socket]);\n\n  const startCall = useCallback(async (targetUserId) => {\n    const peerConnection = createPeerConnection(targetUserId);\n    setPeers(prev => ({ ...prev, [targetUserId]: peerConnection }));\n\n    try {\n      const offer = await peerConnection.createOffer();\n      await peerConnection.setLocalDescription(offer);\n      \n      socket?.emit('webrtc-offer', {\n        targetId: targetUserId,\n        offer\n      });\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    }\n  }, [createPeerConnection, socket]);\n\n  const endCall = useCallback((userId) => {\n    if (peers[userId]) {\n      peers[userId].close();\n      setPeers(prev => {\n        const newPeers = { ...prev };\n        delete newPeers[userId];\n        return newPeers;\n      });\n    }\n    \n    setRemoteStreams(prev => {\n      const newStreams = { ...prev };\n      delete newStreams[userId];\n      return newStreams;\n    });\n  }, [peers]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Handle incoming offers\n    socket.on('webrtc-offer', async ({ offer, senderId }) => {\n      const peerConnection = createPeerConnection(senderId);\n      setPeers(prev => ({ ...prev, [senderId]: peerConnection }));\n\n      try {\n        await peerConnection.setRemoteDescription(offer);\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        \n        socket.emit('webrtc-answer', {\n          targetId: senderId,\n          answer\n        });\n      } catch (error) {\n        console.error('Error handling offer:', error);\n      }\n    });\n\n    // Handle incoming answers\n    socket.on('webrtc-answer', async ({ answer, senderId }) => {\n      const peerConnection = peers[senderId];\n      if (peerConnection) {\n        try {\n          await peerConnection.setRemoteDescription(answer);\n        } catch (error) {\n          console.error('Error handling answer:', error);\n        }\n      }\n    });\n\n    // Handle ICE candidates\n    socket.on('webrtc-ice-candidate', async ({ candidate, senderId }) => {\n      const peerConnection = peers[senderId];\n      if (peerConnection) {\n        try {\n          await peerConnection.addIceCandidate(candidate);\n        } catch (error) {\n          console.error('Error adding ICE candidate:', error);\n        }\n      }\n    });\n\n    return () => {\n      socket.off('webrtc-offer');\n      socket.off('webrtc-answer');\n      socket.off('webrtc-ice-candidate');\n    };\n  }, [socket, createPeerConnection, peers]);\n\n  return {\n    remoteStreams,\n    startCall,\n    endCall\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}